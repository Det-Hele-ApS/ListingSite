// <auto-generated />
using System;
using ListingApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ListingApp.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180613203222_AddedEntities")]
    partial class AddedEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EscortId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EscortId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("RegionId");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Escort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<Guid>("EscortTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("EscortTypeId");

                    b.ToTable("Escorts");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.EscortFeature", b =>
                {
                    b.Property<string>("FeatureName");

                    b.Property<Guid>("EscortId");

                    b.Property<string>("FeatureValue")
                        .IsRequired();

                    b.HasKey("FeatureName", "EscortId");

                    b.HasIndex("EscortId");

                    b.ToTable("EscortFeatures");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.EscortService", b =>
                {
                    b.Property<Guid>("EscortId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EscortId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("EscortService");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.EscortType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EscortTypes");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EscortId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("EscortId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Calendar", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ListingApp.DataAccess.Entities.Escort", "Escort")
                        .WithMany()
                        .HasForeignKey("EscortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.City", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Escort", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.EscortType", "EscortType")
                        .WithMany()
                        .HasForeignKey("EscortTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.EscortFeature", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.Escort", "Escort")
                        .WithMany("EscortFeatures")
                        .HasForeignKey("EscortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.EscortService", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.Escort", "Escort")
                        .WithMany("EscortServices")
                        .HasForeignKey("EscortId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ListingApp.DataAccess.Entities.Service", "Service")
                        .WithMany("EscortServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ListingApp.DataAccess.Entities.Image", b =>
                {
                    b.HasOne("ListingApp.DataAccess.Entities.Escort", "Escort")
                        .WithMany()
                        .HasForeignKey("EscortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
